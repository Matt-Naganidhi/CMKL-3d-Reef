{"mappings":";;;;AAAA,4CAA4C;;;;AAK5C,4EAA4E;AAC5E,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,qFAAqF;IACrF,MAAM,mBAAmB,SAAS,cAAc,CAAC;IACjD,MAAM,cAAc,iBAAiB,YAAY,CAAC;IAElD,yDAAyD;IACzD,MAAM,UAAU,SAAS,aAAa,CAAC;IACvC,MAAM,QAAQ,QAAQ,qBAAqB,GAAG,KAAK;IACnD,MAAM,SAAS,QAAQ,qBAAqB,GAAG,MAAM;IAErD,gDAAgD;IAChD,MAAM,WAAW,IAAI,2BAAoB;QAAC,QAAQ;IAAO;IACzD,SAAS,aAAa,CAAC,OAAO,gBAAgB,GAAG,0DAA0D;IAC3G,SAAS,OAAO,CAAC,OAAO,SAAS,2CAA2C;IAE5E,8BAA8B;IAC9B,MAAM,QAAQ,IAAI;IAElB,4CAA4C;IAC5C,MAAM,SAAS,IAAI,+BAAwB,IAAI,QAAQ,QAAQ,KAAK;IACpE,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,wCAAwC;IAEjE,mEAAmE;IACnE,MAAM,WAAW,IAAI,CAAA,GAAA,0DAAY,EAAE,QAAQ,SAAS,UAAU;IAE9D,qDAAqD;IACrD,4DAA4D;IAC5D,+DAA+D;IAC/D,qCAAqC;IACrC,yCAAyC;IAEzC,uDAAuD;IACvD,MAAM,SAAS,IAAI,CAAA,GAAA,iDAAQ;IAC3B,OAAO,IAAI,CAAC,aAAa,CAAC;QACtB,MAAM,WAAW,IAAI,4BAAqB;YAAC,MAAM;YAAK,cAAc;QAAI,IAAI,mCAAmC;QAC/G,MAAM,OAAO,IAAI,oBAAa,UAAU,WAAW,sDAAsD;QACzG,MAAM,GAAG,CAAC,OAAO,4BAA4B;IACjD;IAEA,yDAAyD;IACzD,SAAS;QACL,sBAAsB,UAAU,uCAAuC;QACvE,SAAS,MAAM,IAAI,gDAAgD;QACnE,SAAS,MAAM,CAAC,OAAO,SAAS,wDAAwD;IAC5F;IAEA,2BAA2B;IAC3B;AACJ","sources":["renderer.js"],"sourcesContent":["// Import necessary components from Three.js\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { PLYLoader } from \"three/examples/jsm/loaders/PLYLoader\";\n\n// Wait for the document to fully load to ensure all elements are accessible\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Read the .ply file path from the data-ply-path attribute of the #modelPath element\n    const modelPathElement = document.getElementById('modelPath');\n    const plyFilePath = modelPathElement.getAttribute('data-ply-path');\n\n    // Select the canvas element and set its width and height\n    const display = document.querySelector(\"#display\");\n    const width = display.getBoundingClientRect().width;\n    const height = display.getBoundingClientRect().height;\n\n    // Initialize the WebGL renderer with the canvas\n    const renderer = new THREE.WebGLRenderer({canvas: display});\n    renderer.setPixelRatio(window.devicePixelRatio); // Set the pixel ratio to support high-resolution displays\n    renderer.setSize(width, height); // Set the renderer size to fill the canvas\n\n    // Create a new Three.js scene\n    const scene = new THREE.Scene();\n\n    // Set up the camera with a perspective view\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    camera.position.setZ(5); // Position the camera to view the scene\n\n    // Initialize camera controls for interactive movement in the scene\n    const controls = new OrbitControls(camera, renderer.domElement);\n\n    // Uncomment below if you need lighting in your scene\n    // const point_light = new THREE.PointLight(0xffffff, 1000);\n    // const ambient_light = new THREE.AmbientLight(0xffffff, 0.5);\n    // point_light.position.set(5, 5, 5);\n    // scene.add(point_light, ambient_light);\n\n    // Function to load a .ply file and add it to the scene\n    const loader = new PLYLoader();\n    loader.load(plyFilePath, (geometry) => {\n        const material = new THREE.PointsMaterial({size: 0.1, vertexColors: true}); // Create a material for the points\n        const mesh = new THREE.Points(geometry, material); // Create a mesh from the loaded geometry and material\n        scene.add(mesh); // Add the mesh to the scene\n    });\n\n    // Function to continuously update the scene and controls\n    function animate() {\n        requestAnimationFrame(animate); // Request the next frame for animation\n        controls.update(); // Update the controls based on user interaction\n        renderer.render(scene, camera); // Render the current state of the scene with the camera\n    }\n\n    // Start the animation loop\n    animate();\n});\n"],"names":[],"version":3,"file":"server.js.map"}